version: '3.8'

services:
  # Redis 서비스
  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      - app-network


  app-mysql:
    image: mysql:8.0.33
    container_name: app_mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: app_root_password
      MYSQL_DATABASE: app_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password  # 사용자 계정 비밀번호
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - app_mysql_data:/var/lib/mysql
    networks:
      - app-network


  test-mysql:
    image: mysql:8.0.33
    container_name: test_mysql
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: test_root_password
      MYSQL_DATABASE: test_db
      MYSQL_USER: test_user
      MYSQL_PASSWORD: test_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - test_mysql_data:/var/lib/mysql
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: |
        INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network

  application:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reservation-app
    ports:
      - "28080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker

    depends_on:
      - app-mysql
      - redis
      - kafka
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "1.0"          # 최대 CPU 사용량: 1 Core  - 컨테이너가 사용할 수 있는 최대 CPU 코어 수를 제한합니다.
          memory: "512M"       # 최대 메모리 사용량: 512MB - 컨테이너가 사용할 수 있는 최대 메모리 양을 제한합니다.
        reservations:
          cpus: "0.5"          # 최소 CPU 예약량: 0.5 Core - 컨테이너가 최소한으로 사용할 수 있는 CPU 예약량.
          memory: "256M"       # 최소 메모리 예약량: 256MB - 컨테이너가 최소한으로 사용할 수 있는 메모리 예약량
# docker stats 명령으로 컨테이너별 리소스 사용량을 실시간 모니터링

  influxdb:
    image: influxdb:1.8.5
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin
      INFLUXDB_HTTP_AUTH_ENABLED : false
      INFLUXDB_DB : myk6db
#      INFLUXDB_BUCKET: myk6db
#      INFLUXDB_ORG: myorg
#      INFLUXDB_HTTP_BIND_ADDRESS: ":8086"
    volumes:
      - influxdb_data:/var/lib/influxdb
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - influxdb
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  app_mysql_data:
  test_mysql_data:
  influxdb_data:
